{"version":3,"sources":["axios.js","components/Row.js","Requests.js","components/Banner.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","get","then","res","data","results","catch","e","className","map","movie","onClick","movieTrailer","name","url","urlParams","URLSearchParams","URL","search","handleClick","key","id","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","setMovie","Math","floor","random","length","str","n","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.18850c97.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\n//base url to make requests to the movie database\r\nconst instance=axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\"\r\n});\r\n\r\nexport default instance;","import React,{useState , useEffect} from 'react';\r\nimport axios from '../axios'\r\nimport '../styles/Row.css'\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst baseUrl=\"https://image.tmdb.org/t/p/original/\";\r\n\r\nconst Row = ({title,fetchUrl,isLargeRow}) => {\r\n    const [movies,setMovies]=useState([]);\r\n    const [trailerUrl,setTrailerUrl]=useState(\"\");\r\n    useEffect(()=>{\r\n        //to make async req,we have two option:-\r\n        //Option 1:-\r\n        // const fetchData=async ()=>{\r\n        //     const res=await axios.get(fetchUrl); \r\n        //     setMovies(res.data.results);\r\n        //     // console.log(\"isnide = \"+movies);\r\n        //     return res;\r\n        // }\r\n        // fetchData();\r\n\r\n        // Option 2:-   \r\n        axios.get(fetchUrl)\r\n        .then(res=>{\r\n            setMovies(res.data.results);\r\n            return res;\r\n        })\r\n        .catch(e=>{\r\n            \r\n        })\r\n    },[fetchUrl]);\r\n\r\n    // console.table(movies);\r\n\r\n    const opts={\r\n        height:\"390\",\r\n        width:\"100%\",\r\n        playerVars:{\r\n            autoplay:1\r\n        }\r\n    }\r\n\r\n    const handleClick=(movie)=>{\r\n        //if some other trailer is already open and user clicked another image then :-\r\n        if(trailerUrl){\r\n            setTrailerUrl('');\r\n        }\r\n        else{\r\n            movieTrailer(movie?.name || \"\")\r\n            .then(url=>{\r\n                //Suppose url=https://www.google.com?a=gdhsdhdj&b=fdndn\r\n                //then new URL(url).search will return a=gdhsdhdj and b=fdndn\r\n                //and new URLSearchParams() provides you access each individual params\r\n                //like you can do then urlParams.get('a') or urlParams.get('b'); \r\n                const urlParams=new URLSearchParams(new URL(url).search);\r\n                setTrailerUrl(urlParams.get('v'));\r\n            })\r\n            .catch(e=>{\r\n\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            <h2>{title}</h2>\r\n            <div className=\"row__posters\">\r\n                {movies.map((movie)=>(\r\n                    <img \r\n                        onClick={()=>handleClick(movie)}\r\n                        key={movie.id}\r\n                        className={`row__poster ${isLargeRow && \"row__posterLarge\"}`}\r\n                        src={`${baseUrl}${ isLargeRow ? movie.poster_path : movie.backdrop_path}`} \r\n                        alt={movie.name} />\r\n                ))}\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Row;\r\n","const API_KEY=\"442f511cc6fc584ad2d8be911c676de1\";\r\n\r\nconst requests={\r\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated:`/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies:`/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies:`/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies:`/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries:`/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React,{useState,useEffect} from 'react';\r\nimport axios from '../axios'\r\nimport requests from '../Requests';\r\nimport '../styles/Banner.css'\r\n\r\nconst Banner = () => {\r\n    const [movie,setMovie]=useState([]);\r\n    useEffect(()=>{\r\n        axios.get(requests.fetchNetflixOriginals)\r\n        .then(res=>{\r\n            // console.log(\"Length= \"+res.data.results.length)\r\n            // console.log(res.data.results[Math.floor(Math.random() * (res.data.results.length - 1))]);\r\n            setMovie(res.data.results[Math.floor(Math.random() * (res.data.results.length - 1))]);\r\n            return res;\r\n        })\r\n        .catch(e=>{\r\n            \r\n        })\r\n    },[])\r\n    // console.log(\"mpvie= \"+movie);\r\n    const truncate=(str,n)=>{\r\n        return str?.length > n ? str.substr(0,n-1) + '...' : str;\r\n    }\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize:\"cover\",\r\n                //use of ? in url is to make sure if movie.backdrop is not nullso that it doesn't throw error\r\n                backgroundImage:`url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n                backgroundPosition:\"center center\"\r\n            }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n                <h1 className=\"banner__title\">\r\n                    {/* Now some films have either title,name or original name,so to counter it:- */}\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n                <h1 className=\"banner__description\">\r\n                    {truncate(movie?.overview,150)}\r\n                </h1>\r\n            </div>\r\n            <div className=\"banner--fadeBottom\"></div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Banner;\r\n","import React,{useEffect,useState} from 'react';\r\nimport '../styles/Nav.css'\r\nconst Nav = () => {\r\n    const [show,handleShow]=useState(false);\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if(window.scrollY > 100){\r\n                handleShow(true);\r\n            }\r\n            else handleShow(false);\r\n        });\r\n        return ()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        }\r\n    },[])\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img\r\n                className=\"nav__logo\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/0f/Logo_Netflix.png\"\r\n                alt=\"Netflix Logo\"\r\n            />  \r\n            <img\r\n                className=\"nav__avatar\"\r\n                src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\"\r\n                alt=\"Netflix Logo\"\r\n            />          \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\nimport './App.css';\nimport Row from './components/Row';\nimport requests from './Requests'\nimport Banner from './components/Banner';\nimport Nav from './components/Nav';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Nav />\n      <Banner />\n      <Row title=\"Netflix Originals\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow/>\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries}/>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}